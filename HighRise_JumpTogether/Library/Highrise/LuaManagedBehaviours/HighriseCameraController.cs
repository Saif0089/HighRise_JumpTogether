/*

    Copyright (c) #YEAR# Pocketz World. All rights reserved.

    This is a generated file, do not edit!

    Generated by com.pz.studio
*/

using UnityEngine;
using Highrise.Client;

namespace Highrise.Lua.Generated
{
    [AddComponentMenu("Lua/Highrise Camera Controller")]
    [LuaBehaviourScript(_luaScriptAssetGuid)]
    public class HighriseCameraController : LuaBehaviourThunk
    {
        const string _luaScriptAssetGuid = "75be91cb877f649beb48734ee09ff3bc";
        public override string ScriptGUID => _luaScriptAssetGuid;

        [SerializeField] private System.Boolean m_canPan;
        [SerializeField] private System.Boolean m_canRotate;
        [SerializeField] private System.Boolean m_canZoom;
        [SerializeField] private System.Double m_touchRotationDampener;
        [SerializeField] private UnityEngine.Vector3 m_pivot;
        [SerializeField] private System.Double m_zoomMin;
        [SerializeField] private System.Double m_zoomMax;
        [SerializeField] private System.Double m_yawOffsetMax;
        [SerializeField] private System.Double m_yawOffsetMin;

        protected override void CopyToProperties()
        {
            if(_script == null)
                return;

            if(_properties == null || _properties.Length != 9)
                _properties = new SerializedPropertyValue[9];                


            _properties[0] = new SerializedPropertyValue()
            {
                Property = _script.GetPropertyAt(0),
                Value = Internal.LuaGlue.CreatePropertyValue(typeof(System.Boolean), m_canPan)
            };

            _properties[1] = new SerializedPropertyValue()
            {
                Property = _script.GetPropertyAt(1),
                Value = Internal.LuaGlue.CreatePropertyValue(typeof(System.Boolean), m_canRotate)
            };

            _properties[2] = new SerializedPropertyValue()
            {
                Property = _script.GetPropertyAt(2),
                Value = Internal.LuaGlue.CreatePropertyValue(typeof(System.Boolean), m_canZoom)
            };

            _properties[3] = new SerializedPropertyValue()
            {
                Property = _script.GetPropertyAt(3),
                Value = Internal.LuaGlue.CreatePropertyValue(typeof(System.Double), m_touchRotationDampener)
            };

            _properties[4] = new SerializedPropertyValue()
            {
                Property = _script.GetPropertyAt(4),
                Value = Internal.LuaGlue.CreatePropertyValue(typeof(UnityEngine.Vector3), m_pivot)
            };

            _properties[5] = new SerializedPropertyValue()
            {
                Property = _script.GetPropertyAt(5),
                Value = Internal.LuaGlue.CreatePropertyValue(typeof(System.Double), m_zoomMin)
            };

            _properties[6] = new SerializedPropertyValue()
            {
                Property = _script.GetPropertyAt(6),
                Value = Internal.LuaGlue.CreatePropertyValue(typeof(System.Double), m_zoomMax)
            };

            _properties[7] = new SerializedPropertyValue()
            {
                Property = _script.GetPropertyAt(7),
                Value = Internal.LuaGlue.CreatePropertyValue(typeof(System.Double), m_yawOffsetMax)
            };

            _properties[8] = new SerializedPropertyValue()
            {
                Property = _script.GetPropertyAt(8),
                Value = Internal.LuaGlue.CreatePropertyValue(typeof(System.Double), m_yawOffsetMin)
            };
        }

        protected override void CopyPropertiesFrom(SerializedPropertyValue[] properties)
        {
            if(_script == null)
            {
                Debug.LogError($"CopyPropertiesFrom failed, null script! Expected {ScriptGUID}");
                return;
            }

            int index;

            var property0 = _script.GetPropertyAt(0);
            if ((index = FindPropertyIndex(properties, property0.name, property0.TypeCode, 0)) > -1)
            {
                if (properties[index].Value?.RawValue is System.Boolean value)
                    m_canPan = value;
            }

            var property1 = _script.GetPropertyAt(1);
            if ((index = FindPropertyIndex(properties, property1.name, property1.TypeCode, 1)) > -1)
            {
                if (properties[index].Value?.RawValue is System.Boolean value)
                    m_canRotate = value;
            }

            var property2 = _script.GetPropertyAt(2);
            if ((index = FindPropertyIndex(properties, property2.name, property2.TypeCode, 2)) > -1)
            {
                if (properties[index].Value?.RawValue is System.Boolean value)
                    m_canZoom = value;
            }

            var property3 = _script.GetPropertyAt(3);
            if ((index = FindPropertyIndex(properties, property3.name, property3.TypeCode, 3)) > -1)
            {
                if (properties[index].Value?.RawValue is System.Double value)
                    m_touchRotationDampener = value;
            }

            var property4 = _script.GetPropertyAt(4);
            if ((index = FindPropertyIndex(properties, property4.name, property4.TypeCode, 4)) > -1)
            {
                if (properties[index].Value?.RawValue is UnityEngine.Vector3 value)
                    m_pivot = value;
            }

            var property5 = _script.GetPropertyAt(5);
            if ((index = FindPropertyIndex(properties, property5.name, property5.TypeCode, 5)) > -1)
            {
                if (properties[index].Value?.RawValue is System.Double value)
                    m_zoomMin = value;
            }

            var property6 = _script.GetPropertyAt(6);
            if ((index = FindPropertyIndex(properties, property6.name, property6.TypeCode, 6)) > -1)
            {
                if (properties[index].Value?.RawValue is System.Double value)
                    m_zoomMax = value;
            }

            var property7 = _script.GetPropertyAt(7);
            if ((index = FindPropertyIndex(properties, property7.name, property7.TypeCode, 7)) > -1)
            {
                if (properties[index].Value?.RawValue is System.Double value)
                    m_yawOffsetMax = value;
            }

            var property8 = _script.GetPropertyAt(8);
            if ((index = FindPropertyIndex(properties, property8.name, property8.TypeCode, 8)) > -1)
            {
                if (properties[index].Value?.RawValue is System.Double value)
                    m_yawOffsetMin = value;
            }
        }
    }
}
